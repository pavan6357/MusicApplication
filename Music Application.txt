"use client"

import React, { useState, useEffect, useRef } from 'react'
import Image from 'next/image'
import Link from 'next/link'
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Slider } from "@/components/ui/slider"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip"
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog"
import { Checkbox } from "@/components/ui/checkbox"
import { Home, Search, Library, PlusCircle, Heart, Rss, PlayCircle, SkipBack, SkipForward, Repeat, Shuffle, LayoutList, Laptop2, Volume, Maximize2, Mic2, Sun, Moon, ChevronLeft, ChevronRight, User, Play, Edit, Trash2, Star } from 'lucide-react'
import { motion, AnimatePresence } from 'framer-motion'

export default function MelodiStream() {
  const [isPlaying, setIsPlaying] = useState(false)
  const [currentSong, setCurrentSong] = useState({
    id: 1,
    title: "Blinding Lights",
    artist: "The Weeknd",
    album: "After Hours",
    duration: "3:20",
    cover: "/placeholder.svg?height=400&width=400"
  })
  const [activeTab, setActiveTab] = useState("home")
  const [isDarkMode, setIsDarkMode] = useState(true)
  const [searchQuery, setSearchQuery] = useState("")
  const [searchSuggestions, setSearchSuggestions] = useState([])
  const [showSearchSuggestions, setShowSearchSuggestions] = useState(false)
  const [likedSongs, setLikedSongs] = useState([])
  const [favoriteSongs, setFavoriteSongs] = useState([])
  const [likedSongsSearchQuery, setLikedSongsSearchQuery] = useState("")
  const [playlists, setPlaylists] = useState([
    { id: 1, name: "Discover Weekly", songs: [] },
    { id: 2, name: "Release Radar", songs: [] },
    { id: 3, name: "Daily Mix 1", songs: [] },
    { id: 4, name: "Chill Hits", songs: [] },
    { id: 5, name: "Workout Energizer", songs: [] }
  ])
  const [newPlaylistName, setNewPlaylistName] = useState("")
  const [selectedSongsForPlaylist, setSelectedSongsForPlaylist] = useState([])
  const [recentlyPlayed, setRecentlyPlayed] = useState([])
  const [genres, setGenres] = useState(["Pop", "Rock", "Hip-Hop", "Electronic", "Classical", "Jazz", "R&B", "Country"])
  const featuredTracksRef = useRef(null)
  const englishSongsRef = useRef(null)
  const hindiSongsRef = useRef(null)
  const regionalSongsRef = useRef(null)

  useEffect(() => {
    document.body.classList.toggle('dark', isDarkMode)
  }, [isDarkMode])

  const featuredTracks = [
    { id: 1, title: "Blinding Lights", artist: "The Weeknd", cover: "/placeholder.svg?height=400&width=400&text=1" },
    { id: 2, title: "Shape of You", artist: "Ed Sheeran", cover: "/placeholder.svg?height=400&width=400&text=2" },
    { id: 3, title: "Dance Monkey", artist: "Tones and I", cover: "/placeholder.svg?height=400&width=400&text=3" },
    { id: 4, title: "Watermelon Sugar", artist: "Harry Styles", cover: "/placeholder.svg?height=400&width=400&text=4" },
    { id: 5, title: "Don't Start Now", artist: "Dua Lipa", cover: "/placeholder.svg?height=400&width=400&text=5" },
    { id: 6, title: "Levitating", artist: "Dua Lipa", cover: "/placeholder.svg?height=400&width=400&text=6" },
    { id: 7, title: "Savage Love", artist: "Jason Derulo", cover: "/placeholder.svg?height=400&width=400&text=7" },
    { id: 8, title: "Dynamite", artist: "BTS", cover: "/placeholder.svg?height=400&width=400&text=8" }
  ]

  const englishSongs = [
    { id: 9, title: "Stay", artist: "The Kid LAROI, Justin Bieber", cover: "/placeholder.svg?height=200&width=200&text=E1" },
    { id: 10, title: "Good 4 U", artist: "Olivia Rodrigo", cover: "/placeholder.svg?height=200&width=200&text=E2" },
    { id: 11, title: "Levitating", artist: "Dua Lipa", cover: "/placeholder.svg?height=200&width=200&text=E3" },
    { id: 12, title: "Peaches", artist: "Justin Bieber", cover: "/placeholder.svg?height=200&width=200&text=E4" },
    { id: 13, title: "Save Your Tears", artist: "The Weeknd", cover: "/placeholder.svg?height=200&width=200&text=E5" },
  ]

  const hindiSongs = [
    { id: 14, title: "Raataan Lambiyan", artist: "Jubin Nautiyal, Asees Kaur", cover: "/placeholder.svg?height=200&width=200&text=H1" },
    { id: 15, title: "Param Sundari", artist: "A.R. Rahman, Shreya Ghoshal", cover: "/placeholder.svg?height=200&width=200&text=H2" },
    { id: 16, title: "Lut Gaye", artist: "Jubin Nautiyal", cover: "/placeholder.svg?height=200&width=200&text=H3" },
    { id: 17, title: "Nadiyon Paar", artist: "Sachin-Jigar, Rashmeet Kaur", cover: "/placeholder.svg?height=200&width=200&text=H4" },
    { id: 18, title: "Tera Suit", artist: "Tony Kakkar", cover: "/placeholder.svg?height=200&width=200&text=H5" },
  ]

  const regionalSongs = [
    { id: 19, title: "Vaathi Coming", artist: "Anirudh Ravichander, Gana Balachandar", cover: "/placeholder.svg?height=200&width=200&text=R1" },
    { id: 20, title: "Butta Bomma", artist: "Armaan Malik", cover: "/placeholder.svg?height=200&width=200&text=R2" },
    { id: 21, title: "Rowdy Baby", artist: "Dhanush, Dhee", cover: "/placeholder.svg?height=200&width=200&text=R3" },
    { id: 22, title: "Kaattu Payale", artist: "Dhee, Santhosh Narayanan", cover: "/placeholder.svg?height=200&width=200&text=R4" },
    { id: 23, title: "Enjoy Enjaami", artist: "Dhee, Arivu", cover: "/placeholder.svg?height=200&width=200&text=R5" },
  ]

  const allSongs = [...featuredTracks, ...englishSongs, ...hindiSongs, ...regionalSongs]

  const togglePlayPause = () => {
    setIsPlaying(!isPlaying)
  }

  const toggleTheme = () => {
    setIsDarkMode(!isDarkMode)
  }

  const handleSearch = (e) => {
    const query = e.target.value
    setSearchQuery(query)
    
    // Generate search suggestions
    const suggestions = allSongs.filter(song => 
      song.title.toLowerCase().includes(query.toLowerCase()) ||
      song.artist.toLowerCase().includes(query.toLowerCase())
    ).slice(0, 5)
    setSearchSuggestions(suggestions)
    setShowSearchSuggestions(true)
  }

  const handleSearchFocus = () => {
    setShowSearchSuggestions(true)
  }

  const handleSearchBlur = () => {
    // Delay hiding suggestions to allow time for clicks on suggestions
    setTimeout(() => setShowSearchSuggestions(false), 200)
  }

  const handleLikedSongsSearch = (e) => {
    setLikedSongsSearchQuery(e.target.value)
  }

  const filteredSongs = allSongs.filter(song =>
    song.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
    song.artist.toLowerCase().includes(searchQuery.toLowerCase())
  )

  const filteredLikedSongs = likedSongs.filter(song =>
    song.title.toLowerCase().includes(likedSongsSearchQuery.toLowerCase()) ||
    song.artist.toLowerCase().includes(likedSongsSearchQuery.toLowerCase())
  )

  const toggleLike = (song) => {
    setLikedSongs(prev => {
      if (prev.some(s => s.id === song.id)) {
        return prev.filter(s => s.id !== song.id)
      } else {
        return [...prev, song]
      }
    })
  }

  const toggleFavorite = (song) => {
    setFavoriteSongs(prev => {
      if (prev.some(s => s.id === song.id)) {
        return prev.filter(s => s.id !== song.id)
      } else {
        return [...prev, song]
      }
    })
  }

  const playSong = (song) => {
    setCurrentSong(song)
    setIsPlaying(true)
    setRecentlyPlayed(prev => [song, ...prev.filter(s => s.id !== song.id)].slice(0, 5))
  }

  const scrollCarousel = (ref, direction) => {
    if (ref.current) {
      const scrollAmount = direction === 'left' ? -200 : 200
      ref.current.scrollBy({ left: scrollAmount, behavior: 'smooth' })
    }
  }

  const createPlaylist = () => {
    if (newPlaylistName.trim()) {
      setPlaylists(prev => [...prev, { id: Date.now(), name: newPlaylistName, songs: selectedSongsForPlaylist }])
      setNewPlaylistName("")
      setSelectedSongsForPlaylist([])
    }
  }

  const deletePlaylist = (id) => {
    setPlaylists(prev => prev.filter(playlist => playlist.id !== id))
  }

  const toggleSongSelection = (song) => {
    setSelectedSongsForPlaylist(prev => {
      if (prev.some(s => s.id === song.id)) {
        return prev.filter(s => s.id !== song.id)
      } else {
        return [...prev, song]
      }
    })
  }

  const CarouselSection = ({ title, songs, carouselRef }) => (
    <div className="relative">
      <h2 className="text-2xl font-semibold mb-4">{title}</h2>
      <div className="relative">
        <Button
          variant="ghost"
          size="icon"
          className="absolute left-0 top-1/2 transform -translate-y-1/2 z-10 bg-gradient-to-r from-primary to-secondary text-white rounded-full shadow-lg"
          onClick={() => scrollCarousel(carouselRef, 'left')}
        >
          <ChevronLeft className="h-6 w-6" />
        </Button>
        <ScrollArea
          ref={carouselRef}
          className="overflow-x-auto whitespace-nowrap"
          orientation="horizontal"
        >
          <div className="flex space-x-4 p-4">
            {songs.map((song) => (
              <motion.div
                key={song.id}
                className="w-48 shrink-0 transition-transform duration-300 ease-in-out transform hover:scale-105"
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                <div className="relative group">
                  <Image src={song.cover} alt={song.title} width={192} height={192} className="rounded-lg" />
                  <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                    <Button
                      variant="ghost"
                      size="icon"
                      className="absolute bottom-2 right-2 text-white hover:text-primary bg-gradient-to-r from-primary to-secondary rounded-full p-2 shadow-lg"
                      onClick={() => playSong(song)}
                    >
                      <Play className="h-8 w-8" />
                    </Button>
                  </div>
                </div>
                <h3 className="mt-2 font-semibold">{song.title}</h3>
                <p className="text-sm text-gray-400">{song.artist}</p>
              </motion.div>
            ))}
          </div>
        </ScrollArea>
        <Button
          variant="ghost"
          size="icon"
          className="absolute right-0 top-1/2 transform -translate-y-1/2 z-10 bg-gradient-to-r from-primary to-secondary text-white rounded-full shadow-lg"
          onClick={() => scrollCarousel(carouselRef, 'right')}
        >
          <ChevronRight className="h-6 w-6" />
        </Button>
      </div>
    </div>
  )

  return (
    <div className={`h-screen flex flex-col ${isDarkMode ? 'bg-gradient-to-br from-gray-900 to-black text-white' : 'bg-gradient-to-br from-gray-100 to-white text-gray-900'} transition-colors duration-500`}>
      <header className={`h-16 ${isDarkMode ? 'bg-black/5' : 'bg-white/5'} backdrop-filter backdrop-blur-lg flex items-center px-6 justify-between border-b ${isDarkMode ? 'border-gray-700' : 'border-gray-200'}`}>
        <div className="flex items-center space-x-4">
          <div className="text-2xl font-bold bg-clip-text  text-transparent bg-gradient-to-r from-purple-400 to-pink-600">MelodiStream</div>
          <nav>
            <Button variant="ghost" onClick={() => setActiveTab("home")}>Home</Button>
            <Button variant="ghost" onClick={() => setActiveTab("search")}>Search</Button>
            <Button variant="ghost" onClick={() => setActiveTab("library")}>Your Library</Button>
          </nav>
        </div>
        <div className="flex items-center space-x-4">
          <div className="relative">
            <Input 
              className={`w-64 ${isDarkMode ? 'bg-white/10' : 'bg-gray-100'} border-0 placeholder-gray-400`}
              placeholder="Search for songs, artists, or podcasts"
              value={searchQuery}
              onChange={handleSearch}
              onFocus={handleSearchFocus}
              onBlur={handleSearchBlur}
            />
            <AnimatePresence>
              {showSearchSuggestions && searchSuggestions.length > 0 && (
                <motion.div
                  initial={{ opacity: 0, y: -10 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -10 }}
                  className={`absolute z-10 w-full mt-1 ${isDarkMode ? 'bg-gray-800' : 'bg-white'} rounded-md shadow-lg`}
                >
                  {searchSuggestions.map((song) => (
                    <div
                      key={song.id}
                      className={`p-2 hover:bg-gray-100 cursor-pointer ${isDarkMode ? 'hover:bg-gray-700' : 'hover:bg-gray-100'}`}
                      onClick={() => playSong(song)}
                    >
                      {song.title} - {song.artist}
                    </div>
                  ))}
                </motion.div>
              )}
            </AnimatePresence>
          </div>
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button variant="ghost" size="icon" onClick={toggleTheme}>
                  {isDarkMode ? <Sun className="h-5 w-5" /> : <Moon className="h-5 w-5" />}
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <p>{isDarkMode ? 'Switch to Light Mode' : 'Switch to Dark Mode'}</p>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
          <Link href="/auth">
            <Button variant="ghost" size="icon">
              <User className="h-5 w-5" />
            </Button>
          </Link>
        </div>
      </header>
      <div className="flex flex-1 overflow-hidden">
        <aside className={`w-60 ${isDarkMode ? 'bg-black/30' : 'bg-white/30'} backdrop-filter backdrop-blur-md p-6 flex flex-col`}>
          <ScrollArea className="flex-grow">
            <nav className="space-y-6">
              <div className="space-y-3">
                <Button variant="ghost" className="w-full justify-start hover:bg-white/10" onClick={() => setActiveTab("home")}>
                  <Home className="mr-2 h-4 w-4" />
                  Home
                </Button>
                <Button variant="ghost" className="w-full justify-start hover:bg-white/10" onClick={() => setActiveTab("search")}>
                  <Search className="mr-2 h-4 w-4" />
                  Search
                </Button>
                <Button variant="ghost" className="w-full justify-start hover:bg-white/10" onClick={() => setActiveTab("library")}>
                  <Library className="mr-2 h-4 w-4" />
                  Your Library
                </Button>
              </div>
              <div className="space-y-3">
                <Dialog>
                  <DialogTrigger asChild>
                    <Button variant="ghost" className="w-full justify-start hover:bg-white/10">
                      <PlusCircle className="mr-2 h-4 w-4" />
                      Create Playlist
                    </Button>
                  </DialogTrigger>
                  <DialogContent>
                    <DialogHeader>
                      <DialogTitle>Create New Playlist</DialogTitle>
                    </DialogHeader>
                    <Input
                      placeholder="Enter playlist name"
                      value={newPlaylistName}
                      onChange={(e) => setNewPlaylistName(e.target.value)}
                    />
                    <ScrollArea className="h-[300px] mt-4">
                      {allSongs.map((song) => (
                        <div key={song.id} className="flex items-center space-x-2 mb-2">
                          <Checkbox
                            id={`song-${song.id}`}
                            checked={selectedSongsForPlaylist.some(s => s.id === song.id)}
                            onCheckedChange={() => toggleSongSelection(song)}
                          />
                          <label htmlFor={`song-${song.id}`} className="text-sm">
                            {song.title} - {song.artist}
                          </label>
                        </div>
                      ))}
                    </ScrollArea>
                    <Button onClick={createPlaylist}>Create</Button>
                  </DialogContent>
                </Dialog>
                <Button variant="ghost" className="w-full justify-start hover:bg-white/10" onClick={() => setActiveTab("liked")}>
                  <Heart className="mr-2 h-4 w-4" />
                  Liked Songs
                </Button>
                <Button variant="ghost" className="w-full justify-start hover:bg-white/10" onClick={() => setActiveTab("favorites")}>
                  <Star className="mr-2 h-4 w-4" />
                  Favorites
                </Button>
              </div>
            </nav>
            <div className="mt-6">
              <h3 className="mb-2 text-sm font-semibold text-gray-400">YOUR PLAYLISTS</h3>
              <div className="space-y-1">
                {playlists.map((playlist) => (
                  <div key={playlist.id} className="flex items-center justify-between">
                    <Button variant="ghost" className="w-full justify-start font-normal hover:bg-white/10">
                      {playlist.name}
                    </Button>
                    <Button variant="ghost" size="icon" onClick={() => deletePlaylist(playlist.id)}>
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </div>
                ))}
              </div>
            </div>
          </ScrollArea>
        </aside>
        <main className={`flex-1 overflow-hidden ${isDarkMode ? 'bg-gradient-to-b from-blue-900/20 to-transparent' : 'bg-gradient-to-b from-blue-100/20 to-transparent'}`}>
          <ScrollArea className="h-full">
            <Tabs value={activeTab} className="w-full">
              <TabsContent value="home" className="p-6 space-y-6">
                <h1 className="text-3xl font-bold">Welcome back</h1>
                <CarouselSection title="Featured Tracks" songs={featuredTracks} carouselRef={featuredTracksRef} />
                <CarouselSection title="English Hits" songs={englishSongs} carouselRef={englishSongsRef} />
                <CarouselSection title="Hindi Hits" songs={hindiSongs} carouselRef={hindiSongsRef} />
                <CarouselSection title="Regional Hits" songs={regionalSongs} carouselRef={regionalSongsRef} />
              </TabsContent>
              <TabsContent value="search" className="p-6 space-y-6">
                <h1 className="text-3xl font-bold">Search</h1>
                <Input 
                  className={`w-full ${isDarkMode ? 'bg-white/10' : 'bg-gray-100'} border-0 placeholder-gray-400`}
                  placeholder="What do you want to listen to?" 
                  value={searchQuery}
                  onChange={handleSearch}
                />
                <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                  {filteredSongs.map((song) => (
                    <motion.div
                      key={song.id}
                      className={`${isDarkMode ? 'bg-white/5' : 'bg-gray-100'} p-4 rounded-lg hover:bg-white/10 transition-colors duration-300`}
                      whileHover={{ scale: 1.05 }}
                      whileTap={{ scale: 0.95 }}
                    >
                      <div className="relative group">
                        <Image src={song.cover} alt={song.title} width={160} height={160} className="rounded-lg mb-2" />
                        <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                          <Button
                            variant="ghost"
                            size="icon"
                            className="absolute bottom-2 right-2 text-white hover:text-primary bg-gradient-to-r from-primary to-secondary rounded-full p-2 shadow-lg"
                            onClick={() => playSong(song)}
                          >
                            <Play className="h-8 w-8" />
                          </Button>
                        </div>
                      </div>
                      <h3 className="font-semibold">{song.title}</h3>
                      <p className="text-sm text-gray-400">{song.artist}</p>
                    </motion.div>
                  ))}
                </div>
              </TabsContent>
              <TabsContent value="liked" className="p-6 space-y-6">
                <h1 className="text-3xl font-bold">Liked Songs</h1>
                <Input 
                  className={`w-full ${isDarkMode ? 'bg-white/10' : 'bg-gray-100'} border-0 placeholder-gray-400`}
                  placeholder="Search your liked songs" 
                  value={likedSongsSearchQuery}
                  onChange={handleLikedSongsSearch}
                />
                <ScrollArea className="h-[calc(100vh-300px)]">
                  <div className="space-y-4">
                    {filteredLikedSongs.map((song) => (
                      <motion.div
                        key={song.id}
                        className={`flex items-center ${isDarkMode ? 'bg-white/5' : 'bg-gray-100'} p-4 rounded-lg hover:bg-white/10 transition-colors duration-300`}
                        whileHover={{ scale: 1.02 }}
                        whileTap={{ scale: 0.98 }}
                      >
                        <Image src={song.cover} alt={song.title} width={64} height={64} className="rounded-lg mr-4" />
                        <div className="flex-grow">
                          <h3 className="font-semibold">{song.title}</h3>
                          <p className="text-sm text-gray-400">{song.artist}</p>
                        </div>
                        <Button
                          variant="ghost"
                          size="icon"
                          className="text-primary hover:text-primary-dark"
                          onClick={() => playSong(song)}
                        >
                          <Play className="h-6 w-6" />
                        </Button>
                      </motion.div>
                    ))}
                  </div>
                </ScrollArea>
              </TabsContent>
              <TabsContent value="favorites" className="p-6 space-y-6">
                <h1 className="text-3xl font-bold">Favorites</h1>
                <ScrollArea className="h-[calc(100vh-300px)]">
                  <div className="space-y-4">
                    {favoriteSongs.map((song) => (
                      <motion.div
                        key={song.id}
                        className={`flex items-center ${isDarkMode ? 'bg-white/5' : 'bg-gray-100'} p-4 rounded-lg hover:bg-white/10 transition-colors duration-300`}
                        whileHover={{ scale: 1.02 }}
                        whileTap={{ scale: 0.98 }}
                      >
                        <Image src={song.cover} alt={song.title} width={64} height={64} className="rounded-lg mr-4" />
                        <div className="flex-grow">
                          <h3 className="font-semibold">{song.title}</h3>
                          <p className="text-sm text-gray-400">{song.artist}</p>
                        </div>
                        <Button
                          variant="ghost"
                          size="icon"
                          className="text-primary hover:text-primary-dark"
                          onClick={() => playSong(song)}
                        >
                          <Play className="h-6 w-6" />
                        </Button>
                      </motion.div>
                    ))}
                  </div>
                </ScrollArea>
              </TabsContent>
              <TabsContent value="library" className="p-6 space-y-6">
                <h1 className="text-3xl font-bold">Your Library</h1>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  <div className={`p-4 rounded-lg ${isDarkMode ? 'bg-white/5' : 'bg-gray-100'}`}>
                    <h2 className="text-xl font-semibold mb-4">Recently Played</h2>
                    <ScrollArea className="h-60">
                      {recentlyPlayed.map((song) => (
                        <motion.div
                          key={song.id}
                          className="flex items-center mb-2"
                          whileHover={{ scale: 1.05 }}
                          whileTap={{ scale: 0.95 }}
                        >
                          <Image src={song.cover} alt={song.title} width={40} height={40} className="rounded-md mr-2" />
                          <div>
                            <p className="font-medium">{song.title}</p>
                            <p className="text-sm text-gray-400">{song.artist}</p>
                          </div>
                        </motion.div>
                      ))}
                    </ScrollArea>
                  </div>
                  <div className={`p-4 rounded-lg ${isDarkMode ? 'bg-white/5' : 'bg-gray-100'}`}>
                    <h2 className="text-xl font-semibold mb-4">Your Playlists</h2>
                    <ScrollArea className="h-60">
                      {playlists.map((playlist) => (
                        <motion.div
                          key={playlist.id}
                          className="flex items-center justify-between mb-2"
                          whileHover={{ scale: 1.05 }}
                          whileTap={{ scale: 0.95 }}
                        >
                          <p>{playlist.name}</p>
                          <Button variant="ghost" size="sm">
                            <Edit className="h-4 w-4" />
                          </Button>
                        </motion.div>
                      ))}
                    </ScrollArea>
                  </div>
                  <div className={`p-4 rounded-lg ${isDarkMode ?  'bg-white/5' : 'bg-gray-100'}`}>
                    <h2 className="text-xl font-semibold mb-4">Genres</h2>
                    <div className="grid grid-cols-2 gap-2">
                      {genres.map((genre, index) => (
                        <motion.div
                          key={index}
                          whileHover={{ scale: 1.05 }}
                          whileTap={{ scale: 0.95 }}
                        >
                          <Button variant="outline" className="w-full">
                            {genre}
                          </Button>
                        </motion.div>
                      ))}
                    </div>
                  </div>
                </div>
              </TabsContent>
            </Tabs>
          </ScrollArea>
        </main>
      </div>
      <footer className={`h-20 ${isDarkMode ? 'bg-black/30' : 'bg-white/30'} backdrop-filter backdrop-blur-md border-t ${isDarkMode ? 'border-gray-800' : 'border-gray-200'} flex items-center px-4`}>
        <div className="flex items-center flex-1">
          <Avatar className="h-14 w-14 mr-4">
            <AvatarImage src={currentSong.cover} alt={currentSong.title} />
            <AvatarFallback>{currentSong.title[0]}</AvatarFallback>
          </Avatar>
          <div>
            <div className="font-semibold">{currentSong.title}</div>
            <div className="text-xs text-gray-400">{currentSong.artist}</div>
          </div>
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button 
                  variant="ghost" 
                  size="icon" 
                  className="ml-4 hover:bg-white/10"
                  onClick={() => toggleLike(currentSong)}
                >
                  <Heart className={`h-4 w-4 ${likedSongs.some(s => s.id === currentSong.id) ? 'fill-red-500' : ''}`} />
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <p>{likedSongs.some(s => s.id === currentSong.id) ? 'Remove from Liked Songs' : 'Add to Liked Songs'}</p>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button 
                  variant="ghost" 
                  size="icon" 
                  className="ml-4 hover:bg-white/10"
                  onClick={() => toggleFavorite(currentSong)}
                >
                  <Star className={`h-4 w-4 ${favoriteSongs.some(s => s.id === currentSong.id) ? 'fill-yellow-500' : ''}`} />
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <p>{favoriteSongs.some(s => s.id === currentSong.id) ? 'Remove from Favorites' : 'Add to Favorites'}</p>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
        </div>
        <div className="flex flex-col items-center flex-1">
          <div className="flex items-center space-x-4">
            <Button variant="ghost" size="icon" className="hover:bg-white/10">
              <Shuffle className="h-4 w-4" />
            </Button>
            <Button variant="ghost" size="icon" className="hover:bg-white/10">
              <SkipBack className="h-4 w-4" />
            </Button>
            <Button variant="ghost" size="icon" className={`h-10 w-10 rounded-full ${isDarkMode ? 'bg-white text-black hover:bg-gray-200' : 'bg-black text-white hover:bg-gray-800'}`} onClick={togglePlayPause}>
              {isPlaying ? <PlayCircle className="h-10 w-10" /> : <PlayCircle className="h-10 w-10" />}
            </Button>
            <Button variant="ghost" size="icon" className="hover:bg-white/10">
              <SkipForward className="h-4 w-4" />
            </Button>
            <Button variant="ghost" size="icon" className="hover:bg-white/10">
              <Repeat className="h-4 w-4" />
            </Button>
          </div>
          <div className="flex items-center w-full max-w-md space-x-2 mt-2">
            <div className="text-xs text-gray-400">0:00</div>
            <Slider defaultValue={[0]} max={100} step={1} className="w-full" />
            <div className="text-xs text-gray-400">{currentSong.duration}</div>
          </div>
        </div>
        <div className="flex items-center justify-end flex-1 space-x-2">
          <Button variant="ghost" size="icon" className="hover:bg-white/10">
            <LayoutList className="h-4 w-4" />
          </Button>
          <Button variant="ghost" size="icon" className="hover:bg-white/10">
            <Laptop2 className="h-4 w-4" />
          </Button>
          <div className="flex items-center space-x-2">
            <Volume className="h-4 w-4" />
            <Slider defaultValue={[50]} max={100} step={1} className="w-20" />
          </div>
          <Button variant="ghost" size="icon" className="hover:bg-white/10">
            <Maximize2 className="h-4 w-4" />
          </Button>
        </div>
      </footer>
    </div>
  )
}